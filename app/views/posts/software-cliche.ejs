<% include ../includes/header %>

    <h1 class="page-title">
        <%= title %>
    </h1>
    <div class="post-meta">3 July 2014</div>
    <div class="page-content">
        <p>Architects found that once they had found out a good solution to a problem in construction, they could reuse that solution again and again in future designs. Over time, they would fill books with these solutions, so that others could learn from them. They called these solutions <em>design patterns</em>.</p>

        <p>Or at least that's what somebody smart once told me.</p>

        <p>In software, great developers have given us <em>Software Design Patterns</em>, from which we can learn and scaffold our own implementations. Popular design patterns include the <em>Model-View-Controller</em>, and the <em>Factory Pattern</em>. These are clever ideas that have become common tools for every programmer.</p>

        <p>But there is with line between learning from great ideas, and using somebody else's clever idea for your own work. Artists face this problem (and programmers often compare their work to artistry). If one finds it useful to compare falling droplets of rain to bullets when conveying a moment of intense action in a novel, then one should be aware of the familiarity of the expression. Using common expressions is not only uninspiring writing, but it makes the reader immune to its intended effect - in the dangerous way that important but unurgent matters become too familiar (such as online privacy concerns, varieties of pollution, or chronic physical pain).</p>

        <p>The problem is evident in product design, when a client hires a developer or product manager to create an outcome that has close parallels - for example, creating a social network.</p>

        <p>Of course, people know all about how social networks operate now - they have "news feeds" and a "profile" for each user with a "wall" for "sharing" content, and of course a messaging or "chat" system. Just like the MVC pattern that the developer will smartly begin to plan and implement, these product patterns will naturally follow. But unlike software design patterns that prevent errors or unmanagable codebases, these product patterns are no better than the novelist's cliché. They were not developed and generously explained by pioneers in an evolving feld, they were stolen from popular projects.</p>

        <p>The product pattern cliché limits rather than supports innovation. A software design pattern, such as the factory pattern, supports creativity because it is abstract in nature. A "news feed" pattern, on the other hand, always yields the same user experience.</p>

        <p>If you're looking for them, you can see these clichés in products everywhere - in mobile applications, media players, social networks, text editors, browsers, email services, and search engines. They're everywhere. But just as a great novel does not debase itself with the use of clichés, neither do great software products. Great products feature altogether new ideas for what the founders see as problems unsatisfactorily solved. That is what makes for a fresh and innovative product; a conscious distate for the software cliché.</p>
        
    </div>
    </div>
    <!-- .container -->
    </div>
    <!-- .main .col-sm-9 -->
    <% include ../includes/sidebar %>
        <% include ../includes/footer %>