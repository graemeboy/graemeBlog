<% include ../includes/header %>
<% include ../includes/post-content-head %>
<div class="page-content">
<h4>The Challenge</h4>

<p>Say we have a mobile keypad, such as this one:</p>

<p><img style="max-width:150px" src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/7d/Telephone-keypad.png/351px-Telephone-keypad.png" alt="Keypad" /></p>

<p>You'll see that digits and letters are mapped onto one another, in that 2 => ['a', 'b', 'c'], 3=> ['d', 'e', 'f'] and so forth.</p>

<p>Given a sequence of integer input (say, 256), give all of the possible combinations of letters.</p>

<p><strong>Example: </strong><br/><strong>Input: 265</strong><br/><strong>Output:</strong><br/>
[ 'amj',
  'bmj',
  'cmj',
  'anj',
  'bnj',
  'cnj',
  'aoj',
  'boj',
  'coj',
  'amk',
  'bmk',
  'cmk',
  'ank',
  'bnk',
  'cnk',
  'aok',
  'bok',
  'cok',
  'aml',
  'bml',
  'cml',
  'anl',
  'bnl',
  'cnl',
  'aol',
  'bol',
  'col' ]</p>


<p>I would be interested to hear what your solution to this is as well, but is my recursive approach:</p>


<h4>JavaScript</h4>
<pre><code>
(function (){
  'use strict';

  /*
   * Keypad which maps numbers to letters, as in the example: http://upload.wikimedia.org/wikipedia/commons/thumb/7/7d/Telephone-keypad.png/351px-Telephone-keypad.png
   */
  var NUMBER_TO_LETTER_MAP = [
    [],
    [],
    ['a', 'b', 'c'],
    ['d', 'e', 'f'],
    ['g', 'h', 'i'],
    ['j', 'k', 'l'],
    ['m', 'n', 'o'],
    ['p', 'q', 'r', 's'],
    ['t', 'u', 'v'],
    ['w', 'x', 'y', 'z']
  ];

  var exampleInput = '223';

  // Runs the program.
  (function (input) {
    // Generate some combinations and print them.
    generateCombinations(input).forEach(function (s) {
      console.log(s);
    });
  }(exampleInput));

  // A helper function to generate the final combinations.
  function generateCombinations(number) {
    // An empty array which will get filled as we calculate each permutation.
    var finalCombinations = [];
    // Starts with an empty array, empty prefix and the complete number.
    combineWords(finalCombinations, '', number);
    return finalCombinations;
  }

  // Combines the characters into the final combinations.
  function combineWords(finalCombinations, prefix, remaining) {
    // Get all of the characters for the first digit in the remaining digits.
    // E.g., ['a', 'b', 'c'].
    var letters = NUMBER_TO_LETTER_MAP[remaining.substr(0, 1)];

    // If this is the last digit, then push the prefix + each remaining letter.
    if (remaining.length === 1) {
      letters.forEach(function (letter) {
        finalCombinations.push(prefix + letter);
      });
    } else {
      // If this is not the last digit, recurse on this function, switching
      // the first remaining character to the end of the prefix.
      // E.g. prefix '' and remaining 'abc' becomes prefix 'a' and remaining 'bc'.
      letters.forEach(function (letter) {
        combineWords(finalCombinations, prefix + letter, remaining.substr(1));
      });
    }
  }
}());
</code></pre>

<h4>Go</h4>

<pre><code>
package main

import (
  "fmt"
  "strconv"
)

var permutations []string
var numToChar [10][4]string

func main() {
  numToChar = [10][4]string{
    [4]string{},
    [4]string{},
    [4]string{"a", "b", "c"},
    [4]string{"d", "e", "f"},
    [4]string{"g", "h", "i"},
    [4]string{"j", "k", "l"},
    [4]string{"m", "n", "o"},
    [4]string{"p", "q", "r", "s"},
    [4]string{"t", "u", "v"},
    [4]string{"w", "x", "y", "z"},
  }

  recCombinations("", "223")
  fmt.Println(permutations)
}

func recCombinations(prefix string, remaining string) {
  digit, _ := strconv.ParseInt(string(remaining[0]), 0, 64)
  letters := numToChar[digit]
  var i int

  // Base case
  if len(remaining) == 1 {
    for i = 0; i < len(letters); i++ {
      if letters[i] != "" {
        permutations = append(permutations, prefix+string(letters[i]))
      }
    }
  } else {
    for i = 0; i < len(letters); i++ {
      if letters[i] != "" {
        recCombinations(prefix+letters[i], remaining[1:len(remaining)])
      }
    }
  }
}
</code></pre>

<h4>Ruby</h4>

<pre><code>
class KeyPad
  LETTER_MAP = [
    [],
    [],
    ['a', 'b', 'c'],
    ['d', 'e', 'f'],
    ['g', 'h', 'i'],
    ['j', 'k', 'l'],
    ['m', 'n', 'o'],
    ['p', 'q', 'r', 's'],
    ['t', 'u', 'v'],
    ['w', 'x', 'y', 'z']
  ]

  def self.rec_perm(permutations, prefix, remaining)
    letters = LETTER_MAP[remaining[0].to_i]

    if remaining.size == 1
      letters.each { |letter| permutations.push(prefix + letter) } && return
    end

    letters.each do |letter|
      rec_perm(permutations, prefix + letter, remaining[1..remaining.size])
    end
  end

  def self.calculate_permutations(input)
    rec_perm((permutations = []), '', input)
    puts permutations
  end
end

KeyPad.calculate_permutations('332')
</code></pre>

</div>
    <!-- .container -->
    </div>
<% include ../includes/footer %>
