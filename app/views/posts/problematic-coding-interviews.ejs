<% include ../includes/header %>
<% title += "<br><small>A humble proposal for strengths-based interviewing</small>"; %>
<% include ../includes/post-content-head %>
    <div class="page-content">
<p>I've done a few technical interviews at start-ups. I often find their approach strange and problematic, in the way that college admissions based on SAT scores clearly are so. Instead of SAT scores, techinical interviews are primarily based on a candidate's ability to solve very contrived algorithmic problems quickly. The engineer will often also say, "We're a small team, so we wear a lot of different hats," by which they mean that they want the candidate to be able to solve a variety of problems, and contribute to the product development through his or her own intitiative and creativity. And yet they give an SAT-style question to the candidate - one that is often just like those practised in algorithms classes and featured in books such as <em>Cracking the Coding Interview</em> (no doubt meant to remind us of books such as <em>Cracking the SAT</em> or <em>Cracking the GRE</em> by the Princeton Review.) If the hiring process is largely biased by the performance on this question, then clearly it will produce homogenous teams all trained in similar ways of thinking - just as a school that went on standardized testing performance would yield white upper-middle class student bodies lacking in diversity of skills and opinions.</p>

<p>Books like <em>Cracking the Coding Interview</em> are based on the premise that companies don't hire people because they're good candidates - they hire them because they interview well. Good interviewees can solve and explain certain types of problems, and if he or she reads a specific book or practices this style of problem-solving, he or she will <em>seem</em> like a better candidate, regardless of actual potential. It's like "playing the system," and it's frustrating, because it reflects almost every other system in our society - from leadership in high school, to getting into college and getting better financial aid, to job promotions. The successful strategies are always whispered to, and tipped in favor of, society's dominant, most privileged group, and it's completely unnecessary.</p>

<p>A system would highlight a candidate's strengths, instead of throwing a contrive problem at them and trying to find weakness. I'd call this <em>positive interviewing</em>, because it tries to find the specific strengths that a candidate might bring to the company, as opposed to <em>negative interviewing</em>, which tries to identify weaknesses that might let the a team down (e.g. lack of knowledge about certain data structures or algorithms.) The reason why it might be more effective is that knowledge and strategy for this kind of problem-solving can always be fixed through training (which new employees should go through in any case), while real strengths like resourcefulness, zest, eagerness to learn, are much harder to find and build.</p>

<p>I recently read a post on Quora by Mattias Petter Johansson, who has become a prolific and inspiring writer on there about everything coding and computer science, in which he admitted to his weaknesses as a computer scientist. He wrote that he studied Art in college, and just likes programming for the sake of it, without getting too much into the deeper, academic engineering aspects of its history. Does that make him less valuable as a candidate? To the homogenous groups of elite coders working in startups across the Bay, it would certainly seem to. But the truth is that clearly he has talents that put him far above others: his open-mindedness, his willingness to share and to learn from others (so evident through his Quora interactions), the diversity of his learnings, and so forth. He is currently an engineer at Spotify, and I'm willing to bet that he is a huge asset for them, far beyond just the clever algorithms that he devises there. Would his qualities have come through strongly enough in a traditional American-style coding interview? I have doubts about that.</p>

<p>So how do we fix the problem? I believe one better strategy would be to ask the candidate to make something on his or her own time, specfiically for the company, and then have the candidate explain that product during an interview. No contrived algorithms problems, but instead, real-world product creation. Then, evaluate the product that the candidate has created in terms of the strengths that it shows - does it have really good UX? Is the design brilliant? Are the algorithms super efficient? Have they intergrated with 3rd-party services in a way that nobody else in your team would have thought to do? Has he or she thought of a new approach to a traditional problem? All of these answers will indicate clearly what strengths the candidate will bring to the team, and what holes he or she would fill. Then, the team can make a decision about what part of the product the candidate would be best suited to work on, if they are happy with the product creation.</p>

<h3>Conclusion</h3>

<p>Traditional approaches to coding interviews are inexcusably stupid, and easy to trick through specific practice and access to coaches and books on the process (e.g. <em>Cracking the Coding Interview</em>). This leads to homogenous groups of coders who think the same way, have been educated in the same style, and will perpetuate the same lack of diversity for years to come. The products they create will continue to reflect this.</p>

<p>A better solution is to learn what the strengths of a candidate are, by offering them an opportunity to create something o his or her own, and then seeing how those strengths will add to the company.</p>
</div></div>
        <% include ../includes/footer %>