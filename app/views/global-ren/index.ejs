<!DOCTYPE html>

<html>

<head>
    <meta charset="utf-8">

    <title>Rotate the World</title>
    <script src="http://code.jquery.com/jquery-1.11.0.min.js" type="text/javascript">
    </script>
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" type="text/css">
    <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js" type="text/javascript">
    </script>
    <script src="/global-ren/js/draggable.js"></script>
    <script src="/global-ren/js/mapDrag.js"></script>
    <script type="text/javascript">
        jQuery(document).ready(function($) {
            //console.log("hi");
            //renMapWrapper
            $('#renMapWrapper').kinetic({
                slowdown: 0.8
            });

            var lastScrollTop = 0;
            var zoom = 0.4;
            var zoomFactor = 0.01;
            var transformScale;

            //$('#mapRenWrapper').wheelzoom();


            var origin;
            var currentMousePos = {
                x: 0,
                y: 0
            };
            var windowWidth = $(window).width(); //retrieve current window width
            console.log("width: " + windowWidth);
            var windowHeight = $(window).height(); //retrieve current window height
            var constScaleX = windowWidth / 2;
            var constScaleY = windowHeight / 2;
            var constScale = constScaleX + "px" + " " + constScaleY + "px";
            var mozScale;
            zoomMap();

            function zoomMap() {
                origin = currentMousePos.x + "px " + currentMousePos.y + "px";
                //console.log ("origin: " + origin);
                transformScale = "scale(" + zoom + ")";
                mozScale = "scale(" + zoom + ", " + zoom + ")";
                console.log(mozScale);
                var sc = currentMousePos.x;
                $('#renMap').css({
                    "-webkit-transform": transformScale,
                    '-o-transform': transformScale,
                    '-moz-transform': mozScale,
                    '-ms-zoom': zoom,
                    /*
      'transform-origin': "1500px 500px",
      '-webkit-transform-origin:': "1500px 500px"
*/
                });
                currentMousePos = {
                    x: 1500,
                    y: 500
                };
            }


            /*
  $(document).mousemove(function(event) {
      currentMousePos.x = event.pageX;
      currentMousePos.y = event.pageY;
  });
*/


            var st = $(this).scrollTop();

            $(window).scroll(function(event) {
                event.preventDefault();
                var stN = $(this).scrollTop();
                console.log(zoom);
                if (st > lastScrollTop) {
                    // downscroll code
                    if (zoom > 0.37) {
                        zoom -= zoomFactor;
                    }
                } else {
                    // upscroll code
                    if (zoom < 0.8) {
                        zoom += zoomFactor;
                    }
                }
                lastScrollTop = stN;
                //$('#renMap').animate({ 'zoom': zoom });
                zoomMap();
            });



        });
    </script>
    <style type="text/css">
        body {
            margin: 0;
            padding: 0;
        }
        /*
    * Sidebar
    */
        /* Hide for mobile, show later */
        .sidebar {
            display: none;
            z-index: 999999999;
        }
        @media (min-width: 768px) {
            .sidebar {
                position: fixed;
                top: 20px;
                bottom: 20px;
                left: 0;
                z-index: 1000;
                display: block;
                overflow-x: hidden;
                overflow-y: auto;
                /* Scrollable contents if viewport is shorter than content. */
                background-color: #f5f5f5;
                box-shadow: 2px 2px 15px rgba(136, 136, 136, 0.5);
            }
        }
        #map {
            margin: -5 0;
            position: absolute;
            top: 50px;
            left: 470px;
            width: 600px;
        }
        .foreground {
            fill: #adfffc;
            stroke: #000;
            stroke-width: 3px;
            pointer-events: all;
            cursor: -webkit-grab;
            cursor: -moz-grab;
        }
        .foreground.zooming {
            cursor: -webkit-grabbing;
            cursor: -moz-grabbing;
        }
        .foreground.active {
            fill: black;
        }
        .graticule {
            fill: none;
            zindex: 0;
            stroke: #636B62;
            stroke-width: .5px;
            stroke-dasharray: 2, 2;
        }
        .mesh {
            stroke: #50576A;
            stroke-width: .5px;
            fill: none;
        }
        .point {
            fill: red;
            zIndex: 9999;
        }
        .land {
            fill: #baffa3;
            pointer-events: all;
            cursor: -webkit-grab;
            cursor: -moz-grab;
        }
        .land.active {
            fill: #9ed88a;
            pointer-events: all;
            cursor: -webkit-grab;
            cursor: -moz-grab;
        }
        .land.zooming {
            cursor: -webkit-grabbing;
            cursor: -moz-grabbing;
        }
        .switch-controls {
            margin-top: 30px;
            z-index: 999;
            position: absolute;
            top: 40px;
            right: 40px;
        }
        a.switch-map:hover {} .panel {
            /*display:none;*/
            cursor: move;
            background-color: white;
            display: none;
            position: absolute;
            left: 50px;
        }
        footer .navbar {
            position: fixed;
            bottom: 0;
            opacity: 0.85;
            right: 0;
        }
        body {
            margin: 0;
            padding: 0;
            /* overflow: hidden; */
        }
        #renMap {
            background-image: url('/global-ren/img/renMap.png');
            background-repeat: no-repeat;
            background-position: right top;
            width: 3400px;
            height: 2500px;
            -ms-zoom: 0.4;
            -moz-transform: scale(0.4);
            -moz-transform-origin: 0px 0;
            -o-transform: scale(0.4);
            -o-transform-origin: 0 0;
            -webkit-transform: scale(0.4);
            -webkit-transform-origin: 0 0;
            position: absolute;
            /*
left:-960px;
       top: -500px;
*/
        }
        #renMapWrapper {
            display: none;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            max-width: 1300px;
            overflow: hidden;
        }
        .location {
            position: absolute;
            width: 10px;
            height: 10px;
            z-index: 9999;
            /*
background-color: red;
	    border-radius: 100%;
*/
        }
        .location-place {
            width: 16px;
            height: 16px;
            background-image: url('/global-ren/img/facebook_places.png');
            display: inline-block;
        }
        .location span {
            font-size: 60px;
            color: white;
        }
        .doc-wrapper {
            position: relative;
            max-width: 1300px;
            height: 100%;
            min-height: 500px;
            overflow: hidden;
        }
        footer .navbar a {
            color: #fff;
        }
        .bottom-nav-menu {
            padding: 0;
            margin: 0;
        }
        .bottom-nav-menu li {
            float: left;
            list-style: none;
            margin-right: 25px;
        }
    </style>

</head>

<body>

    <div class="container-fluid">
        <div class="switch-controls pull-right">
            <a href="#" class="switch-map btn btn-default" id="modernMapControl">
                <span class="mapSelected glyphicon glyphicon-globe"></span>Modern Map</a>
            <a href="#" class="switch-map btn btn-default" id="renMapControl">
                <span class="mapSelected"></span>Renaissance Era Map</a>
        </div>
        <div class="clearfix"></div>

        <div class="col-sm-5 col-md-4 sidebar panel well">
            <a href="#" id="getYear" class="panel-comparison-btn btn btn-default pull-right">Year Comparison</a>
            <a href="#" id="getCorpus" class="panel-comparison-btn btn btn-default pull-right active" style="margin-right: 10px;">Corpus Comparison</a>
            <div class="panel-heading" id="info">
                <h3>Global Renaissance</h3>
            </div>

            <div class="panel-body">
                <div id="countryDataViz-1"></div>
                <p class="legend"></p>
            </div>
            <!-- .panel-body -->
        </div>
        <!-- .sidebar -->
    </div>
    <!-- .container-fluid -->

    <div id="renMapWrapper">
        <div id="renMap"></div>
    </div>
    <div id="map"></div>

    <script src="http://d3js.org/d3.v3.min.js" type="text/javascript">
    </script>
    <script src="/global-ren/js/d3.geo.projection.min.js" type="text/javascript">
    </script>
    <script src="/global-ren/js/topojson.min.js" type="text/javascript">
    </script>
    <script src="/global-ren/js/d3.geo.zoom.js" type="text/javascript">
    </script>
    <script type="text/javascript">
        jQuery(document).ready(function($) {

            var curCountry;
            var width = 600,
                height = 600;

            var loader = d3.dispatch("world");

            console.log(d3)
            /* set up projections for this globe */
            var ortho = orthographicProjection(width, height)
                .scale(245)
                .translate([width / 2, height / 2 /*  * .56 */ ]);

            var eisen = d3.geo.eisenlohr()
                .precision(.1)
                .clipExtent([
                    [1, 1],
                    [width - 1, height - 1]
                ])
                .translate([width / 2, height / 2])
                .scale(75)
                .rotate([0, 0 /* -30 */ ]);

            /* instantiate SVG */
            console.log(d3)
            svg = d3.selectAll("#map")
                .append("svg")
                .attr("width", width)
                .attr("height", height);

            /* load countries data from file */
            d3.json("/global-ren/maps_110.json", function(error, world) {
                svg = d3.select("svg")
                /* add country polygons and make them interactive */
                svg.selectAll(".countries")
                    .data(topojson.feature(world, world.objects.count).features)
                    .enter().append("path")
                    .attr("class", "land")
                    .attr("data-country", function(d) {
                        return d.properties.name;
                    })
                    .on("click", function(d) {
                        curCountry = d.properties.name;
                        updateViz(d.properties.name);
                        d3.geo.zoom(this);
                    })
                    .on("mouseover", function() {
                        d3.select(this).classed("active", true);
                    })
                    .on("mouseout", function() {
                        d3.select(this).classed("active", false);
                    });

                /* add country borders */
                svg.insert("path", ".foreground")
                    .datum(topojson.mesh(world, world.objects.count))
                    .attr("class", "mesh");

                var rotate = function(rotate) {
                    rotate[0] = d3.event.x;
                    return {
                        angle: rotate[0],
                        rotate: rotate
                    };
                }
                var update = function(rotate) {
                    return rotate[0] = d3.event.x;
                }
                var origin = function(rotate) {
                    return {
                        x: rotate[0]
                    };
                }

                projections = []

                var projection = ortho,
                    path = d3.geo.path().projection(projection);


                var svg = d3.select("svg").call(drawMap, path, true);
                loader.on("world", function() {
                    svg.selectAll("path").attr("d", path);
                });

                var drag = d3.behavior.drag()
                    .on("drag", function() {
                        angle = rotate(projection.rotate());
                        projection.rotate(angle.rotate);
                        svg.selectAll("path").attr("d", path);
                        /*
svg.each(function(d) { 
            console.log(d)
            d3.select(this).selectAll("path").attr("d", d.path);
          });
*/
                    })

                drag.origin(function() {
                    return origin(projection.rotate());
                });

                svg.selectAll(".foreground").call(drag);
                svg.selectAll("path.land").call(drag);



                /* function update() function(rotate) { return rotate[0] = d3.event.x; }, function(rotate) { return {x: rotate[0]}; }); */


                /* create projections to map countries onto sphere and add zooming functions */
                /*
var projections = []  
    svg.data([ortho, eisen])
        .each(function(projection) {
            var path = d3.geo.path().projection(projection),
                svg = d3.select("svg").call(drawMap, path, true);
                
                projections.push(projection);
                var projections_ = projections.slice();
*/
                /*
console.log(projection);
                var tester = []
                tester.push(projection)
                console.log(tester.slice())
*/
                /* make foreground object zoomable */



                /*
.call(d3.geo.zoom().projection(projection)
                        .scaleExtent([projection.scale() * .7, projection.scale() * 10])
                        //.x(xScale)
                        .on("zoom.redraw", function() {
                            d3.event.sourceEvent.preventDefault();
                            svg.selectAll("path").attr("d", path);
                        })
                    );
*/

                /* make countries zoomable */

                /*
.on("mousedown.grab",  function() {
                        var point;
                        
                        point = d3.selectAll("svg").append("path")
                                    .datum({type: "Point", coordinates: projection.invert(d3.mouse(this))})
                                .attr("class", "point")
                                .attr("d", path);
                        
                        var path = d3.select(this).classed("zooming", true),
                            w = d3.select(window).on("mouseup.grab", function() {
              
                        path.classed("zooming", false);
                        w.on("mouseup.grab", null);
                        point.remove();
                            });
                        })
/*            
                    .call(d3.geo.zoom().projection(projection)
                        .scaleExtent([projection.scale() * .7, projection.scale() * 10])
                        //.x(xScale)
                        .on("zoom.redraw", function() {
                                d3.event.sourceEvent.preventDefault();
                                svg.selectAll("path").attr("d", path);
                            }));
*/

                /*
                loader.on("world", function() { svg.selectAll("path").attr("d", path); });  


                var drag = d3.behavior.drag()
                  .on("drag", function() {
                    for (var i = 0; i < projections_.length; ++i) {
            var projection = projections_[i],
                angle = rotate(projection.rotate());
            projection.rotate(angle.rotate);
          }
                  });
                
                if (origin) drag.origin(function() { return origin(projection.rotate()); });
                svg.selectAll(".foreground").call(drag);
                svg.selectAll("path.land").call(drag);
        
    });
*/


                loader.world();
            });

            svg.selectAll("path").attr("x", 1000);

            /* adds sphere overlayer to globe for interactions */
            function drawMap(svg, path, mousePoint) {
                var projection = path.projection();

                /*
    svg.insert("path", ".foreground")
      .datum(d3.geo.graticule())
      .attr("class", "graticule")
      .attr("d", path);  */

                svg.insert("path", ".land")
                    .datum({
                        type: "Sphere"
                    })
                    .attr("class", "foreground")
                    .attr("d", path)
                    .on("mousedown.grab", function() {
                        var point;
                        point = d3.selectAll("svg").insert("path")
                            .datum({
                                type: "Point",
                                coordinates: projection.invert(d3.mouse(this))
                            })
                            .attr("class", "point")
                            .attr("d", path);
                        var path = d3.select(this).classed("zooming", true),
                            w = d3.select(window).on("mouseup.grab", function() {
                                path.classed("zooming", false);
                                w.on("mouseup.grab", null);
                                if (mousePoint) point.remove();
                            });

                    });

            }

            var margin = {
                top: 85,
                right: 20,
                bottom: 50,
                left: 100
            },
                width = 300 - margin.left - margin.right,
                height = 400 - margin.top - margin.bottom,
                gridSize = Math.floor(width / 6),
                legendElementWidth = Math.floor((margin.left + margin.right + width) / 9), //Math.floor(width/9),
                buckets = 9,
                colors = ["#ffffd9", "#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494", "#081d58"];

            var myParse = function(str) {
                if (parseInt(str) === 0) return 0;
                var nums = str.split("/");
                return (parseFloat(nums[0]) * 100) / parseFloat(nums[1]);
            }


                function showCountryData(countryName) {
                    //var link  = '/renaissance/custom?qry='+encodeURIComponent(countryName.toLowerCase());
                    var file = countryName + ".tsv";
                    d3.tsv("/global-ren/tfidf/" + file,
                        function(d) {
                            return {
                                word: d.word,
                                collection: d.collection,
                                value: myParse(d.value)
                            };
                        },
                        function(error, data) {

                            var words = [];
                            data.forEach(function(d) {
                                if (words.indexOf(d.word) === -1) words.push(d.word)
                            });

                            var labels = [countryName, 'Continent', 'Comparison', 'Milton', 'Shakespeare', 'EEBO']

                            var types = [];
                            data.forEach(function(d) {
                                if (types.indexOf(d.collection) === -1) types.push(d.collection)
                            });

                            var colorScale = d3.scale.quantile()
                                .domain([0, buckets - 1, d3.max(data, function(d) {
                                    return d.value * 100;
                                })])
                                .range(colors);

                            var svg = d3.selectAll("#countryDataViz-1").append("svg")
                                .attr("width", width + margin.left + margin.right)
                                .attr("height", height + margin.top + margin.bottom)
                                .append("g")
                                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                            var wordlabels = svg.selectAll(".wordlabel")
                            //.data(d3.set(data, function(d) {return d.word;}))
                            .data(words)
                                .enter().append("text")
                                .text(function(d) {
                                    return d;
                                })
                                .attr("x", 0)
                                .attr("y", function(d, i) {
                                    return i * gridSize;
                                })
                                .style("text-anchor", "end")
                                .attr("transform", "translate(-6," + gridSize / 1.5 + ")")
                                .attr("class", function(d, i) {
                                    return ((i >= 0 && i <= 4) ? "dayLabel mono axis axis-workweek" : "dayLabel mono axis");
                                });

                            function toTitleCase(str) {
                                return str.replace(/\w\S*/g, function(txt) {
                                    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                                });
                            }

                            var typelabels = svg.selectAll(".typeLabel")
                            //.data(d3.set(data, function(d) { return d.collection; }))
                            .data(types)
                                .enter().append("text")
                                .text(function(d, i) {
                                    if (d == 'corpus') {
                                        return 'EEBO'
                                    } else if (d == 'country') {
                                        return countryName
                                    } else {
                                        return toTitleCase(d.replace('_', ' '));
                                    }
                                })
                                .attr("transform", function(d, i) {
                                    return "translate(" + (i * gridSize) + ",0)" + "translate(" + gridSize / 2 + ", -6)rotate(-65)";
                                })
                                .style("text-anchor", "start")
                                .attr("class", function(d, i) {
                                    return ((i >= 7 && i <= 16) ? "timeLabel mono axis axis-worktime" : "timeLabel mono axis");
                                });


                            var heatMap = svg.selectAll(".country")
                                .data(data)
                                .enter().append("rect")
                                .attr("x", function(d) {
                                    return (types.indexOf(d.collection) * gridSize);
                                })
                                .attr("y", function(d) {
                                    return (words.indexOf(d.word) * gridSize);
                                })
                                .on("mouseover", function(d) {
                                    d3.select(this).style({
                                        'stroke': 'red',
                                        'stroke-width': 4
                                    })
                                })
                                .on("mouseout", function(d) {
                                    d3.select(this).style({
                                        'stroke': 'none'
                                    })
                                })
                                .attr("class", "hour") // bordered")
                            .attr("width", gridSize - 4)
                                .attr("height", gridSize - 4)
                                .style("fill", "#c9c9c9");

                            heatMap.transition().duration(1000)
                                .style("fill", function(d) {
                                    if (d.value == 0) return "#bfbfbf";
                                    else return colorScale(d.value * 100);
                                });

                            heatMap.append("title").text(function(d) {
                                return d.value;
                            });

                            /*
var legend = svg.selectAll(".legend")
              .data([0].concat(colorScale.quantiles()), function(d) { return d; })
              .enter().append("g")
              .attr("class", "legend");

          legend.append("rect")
            .attr("x", function(d, i) { return (legendElementWidth * i)-margin.left; })
            .attr("y", height+margin.bottom-10)
            .attr("width", legendElementWidth)
            .attr("height", legendElementWidth)
            .style("fill", function(d, i) { return colors[i]; });

          legend.append("text")
            .attr("class", "mono")
            .text(function(d, i) { if (i % 2 === 0) return "≥" + Math.round(d); })
            .attr("x", function(d, i) { return (legendElementWidth * i)-margin.left; })
            .attr("y", height+margin.bottom-15);
*/
                        });




                    //$document.getElementById('countryDataViz-1').innerHTML = makeCountryViz(countryName);
                }
            var countries_loaded = [];

            function updateViz(countryName) {
                $('.panel').show();
                $('.panel-comparison-btn').removeClass('active');
                $('#getCorpus').addClass('active');
                document.getElementById('info').innerHTML = "<h3>" + countryName + "</h3>";
                document.getElementById('countryDataViz-1').innerHTML = "";
                showCountryData(countryName);
            }
            /* generate orthographic projection */
            function orthographicProjection(width, height) {
                return d3.geo.orthographic()
                    .precision(.5)
                    .clipAngle(90)
                    .clipExtent([
                        [1, 1],
                        [width - 1, height - 1]
                    ])
                    .translate([width / 2, height / 2])
                    .scale(width / 2 - 10)
                    .rotate([0, -30]);
            }

            function getYearCountryData(countryName) {
                //var link  = '/renaissance/custom?qry='+encodeURIComponent(countryName.toLowerCase());

                var file = countryName + ".tsv";
                d3.tsv("/global-ren/yearfreq/" + file,
                    function(d) {
                        if (d.year != 1750) {
                            return {
                                word: d.word,
                                year: +d.year,
                                freq: +d.freq
                            };
                        }
                    },
                    function(error, data) {

                        var words = [];
                        data.forEach(function(d) {
                            if (words.indexOf(d.word) === -1) words.push(d.word)
                        });

                        var years = [1500, 1550, 1600, 1650, 1700];
                        /*
data.forEach(function(d) { if (years.indexOf(d.year) === -1) years.push(d.year)});
          years.sort();
*/

                        var colorScale = d3.scale.quantile()
                            .domain([0, buckets - 1, d3.max(data, function(d) {
                                return d.freq;
                            })])
                            .range(colors);

                        var svg = d3.selectAll("#countryDataViz-1").append("svg")
                            .attr("width", width + margin.left + margin.right)
                            .attr("height", height + margin.top + margin.bottom)
                            .append("g")
                            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                        var wordlabels = svg.selectAll(".wordlabel")
                        //.data(d3.set(data, function(d) {return d.word;}))
                        .data(words)
                            .enter().append("text")
                            .text(function(d) {
                                return d;
                            })
                            .attr("x", 0)
                            .attr("y", function(d, i) {
                                return i * gridSize;
                            })
                            .style("text-anchor", "end")
                            .attr("transform", "translate(-6," + gridSize / 1.5 + ")")
                            .attr("class", function(d, i) {
                                return ((i >= 0 && i <= 4) ? "dayLabel mono axis axis-workweek" : "dayLabel mono axis");
                            });

                        var typelabels = svg.selectAll(".typeLabel")
                        //.data(d3.set(data, function(d) { return d.collection; }))
                        .data(years)
                            .enter().append("text")
                            .text(function(d) {
                                return d + "-" + (d + 50);
                            })
                            .attr("transform", function(d, i) {
                                return "translate(" + (i * gridSize) + ",0)" + "translate(" + gridSize / 2 + ", -6)rotate(-65)";
                            })
                            .style("text-anchor", "start")
                            .attr("class", function(d, i) {
                                return ((i >= 7 && i <= 16) ? "timeLabel mono axis axis-worktime" : "timeLabel mono axis");
                            });


                        var heatMap = svg.selectAll(".country")
                            .data(data)
                            .enter().append("rect")
                            .attr("x", function(d) {
                                return (years.indexOf(d.year) * gridSize);
                            })
                            .attr("y", function(d) {
                                return (words.indexOf(d.word) * gridSize);
                            })
                            .on("mouseover", function(d) {
                                d3.select(this).style({
                                    'stroke': 'red',
                                    'stroke-width': 4
                                })
                            })
                            .on("mouseout", function(d) {
                                d3.select(this).style({
                                    'stroke': 'none'
                                })
                            })
                            .attr("class", "hour") // bordered")
                        .attr("width", gridSize - 4)
                            .attr("height", gridSize - 4)
                            .style("fill", "#c9c9c9");

                        heatMap.transition().duration(1000)
                            .style("fill", function(d) {
                                if (d.freq == 0) return "#bfbfbf";
                                else return colorScale(d.freq);
                            });

                        heatMap.append("title").text(function(d) {
                            return d.freq;
                        });

                        /*
var legend = svg.selectAll(".legend")
              .data([0].concat(colorScale.quantiles()), function(d) { return d; })
              .enter().append("g")
              .attr("class", "legend");

          legend.append("rect")
            .attr("x", function(d, i) { return (legendElementWidth * i)-margin.left; })
            .attr("y", height+margin.bottom-10)
            .attr("width", legendElementWidth)
            .attr("height", legendElementWidth)
            .style("fill", function(d, i) { return colors[i]; });

          legend.append("text")
            .attr("class", "mono")
            .text(function(d, i) { if (i % 2 === 0) return "≥" + Math.round(d); })
            .attr("x", function(d, i) { return (legendElementWidth * i)-margin.left; })
            .attr("y", height+margin.bottom-15);
*/
                    });

                //$document.getElementById('countryDataViz-1').innerHTML = makeCountryViz(countryName);
            }


            $('#getYear').click(function(e) {
                e.preventDefault();
                $('.panel-comparison-btn').removeClass('active');
                $(this).addClass('active');
                document.getElementById('info').innerHTML = "<h3>" + curCountry + "</h3>";
                document.getElementById('countryDataViz-1').innerHTML = "";
                getYearCountryData(curCountry);
            });

            $('#getCorpus').click(function(e) {
                e.preventDefault();
                updateViz(curCountry);
            });



            $('.switch-map').click(function(e) {
                e.preventDefault();
                $('.mapSelected').removeClass('glyphicon glyphicon-globe');
                $(this).find('.mapSelected').addClass('glyphicon glyphicon-globe');

                if ($(this).attr('id') == 'renMapControl') {
                    $('#map').hide();
                    $('#renMapWrapper').show();
                } else {
                    $('#renMapWrapper').hide();
                    $('#map').show();
                }
            });


            var elem = document.querySelector('.panel');
            var draggie = new Draggabilly(elem, {});

            var locations = {
                // Country Name : [top position, right position]
                "China": [1040, 530],
                "England": [800, 1280],
                "France": [880, 1300],
                "America": [1000, 2500],
                "India": [1200, 720],
                "Spain": [940, 1360],
                "Korea": [920, 460],
                "Egypt": [1150, 1090],
                "Japan": [940, 320],
                "Portugal": [910, 1390]
            };

            var loc;
            $.each(locations, function(key, value) {
                loc = document.createElement('a');
                $(loc).append('<span class="fa fa-map-marker"></span> ');
                $(loc).attr('href', '#');
                $(loc).attr('data-country', key);
                loc.className = 'location';
                document.getElementById('renMap').appendChild(loc);
                $(loc).css({
                    'top': value[0] + "px",
                    'right': value[1] + "px"
                });
                //$(loc).text(key);
                //console.log("Added, right: " + value[1] + "px");
                var self = loc;
                addListener(self);
            });

            $('#renMap').click(function(e) {
                console.log(e.target);
                if (!$(e.target).is('.location, .location span')) {
                    $('.panel').fadeOut('fast');
                }
            });

            function addListener(self) {
                $(self).click(function(e) {
                    e.preventDefault();
                    console.log("Updating viz");
                    curCountry = $(self).attr('data-country');
                    updateViz($(self).attr('data-country'));
                });
            }

        });
    </script>

    <footer class="visible-md visible-lg">
        <nav class="navbar navbar-inverse" role="navigation">
            <div class="container-fluid">
                <div class="collapse navbar-collapse">
                    <div style="margin-top:10px;font-size:18px;font-weight:normal;color:white;">
                        <a href="about">Global Renaissance Project</a>
                    </div>
                </div>
                <!-- /.navbar-collapse -->
            </div>
        </nav>
    </footer>
    <!-- /.container-fluid -->
    <div class="clearfix"></div>

</body>

</html>